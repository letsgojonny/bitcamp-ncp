
// Gradle 도구의 기능을 확장하는 설정
plugins {
    // Gradle에서 자바 애플리케이션을 실행시킬 수 있도록 기능을 추가한다.
    id 'application'    // 'java 플러그인 포함'
    // id 'java'

    // Gradle에서 스프링부트를 다룰 수 있도록 기능을 추가한다.
    id 'org.springframework.boot' version '3.0.1'

    // Gradle에서 스프링부트 의존 라이브러리를 다룰 수 있도록 기능을 추가한다.
    id 'io.spring.dependency-management' version '1.1.0'
}

// 배포 파일(.jar, .zip 등)을 만들 때 사용할 이름 설정
group = 'bitcamp'
version = '0.0.1-SNAPSHOT'

// 애플리케이션 개발에 사용하는 자바 언어의 최대 버전 설정. 예) 17버전까지의 문법만 사용!
sourceCompatibility = '17'

// Spring Configuration Processor 설정 정보
configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

// 의존 라이브러리가 업로드 되어 있는 서버 정보
// Gradle은 이 서버에서 라이브러리 파일을 다운로드 할 것이다.
repositories {
    mavenCentral()
}

// 애플리케이션에서 사용하는 외부 라이브러리 정보
dependencies {
    // Spring Boot 기본 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // 개발하는 동안 사용하는 라이브러리
    // 배포 파일을 만들 때 제외된다.
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // 스프링부트 관련 애노테이션 처리 라이브러리
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // 단위 테스트 할 때 사용하는 라이브러리
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'junit:junit:4.13.2'

    // 일반 용도의 유틸리티 라이브러리
    implementation 'com.google.guava:guava:31.1-jre'
}

// 애플리케이션 테스트에 사용할 단위 테스트 프레임워크 설정
tasks.named('test') {
  useJUnitPlatform()
}

// run 명령으로 실행시킬 자바 클래스 이름
application {
    // Define the main class for the application.
    mainClass = 'bitcamp.bootapp.App'
}
